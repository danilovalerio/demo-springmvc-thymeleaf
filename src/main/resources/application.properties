server.port=${por:8085}
#H2
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=

#exibe os comandos sql no console.
spring.jpa.show-sql=true 

#formata o sql para visualização mais agradável
spring.jpa.properties.hibernate.format_sql=true

#para visualizar no browser
#http://localhost:8085/h2-console


#MYSQL
#spring.datasource.url= jdbc:mysql://localhost:3307/demo_mvc?createDatabaseIfNotExist=true&useSSL=false
#spring.datasource.username= root
#spring.datasource.password= usbw

#JPA 
#Para o próprio hibernate criar as colunas e tabelas no banco de dados de acordo com nosso mapeamento
#spring.jpa.hibernate.ddl-auto= update 
#Exibir no log da aplicação os sql's gerados pelo hibernate
#spring.jpa.show-sql= true
#Habilita um filtro no Spring, para tratar um problema de lazing exception de 1 para N ou N para N com a view para listas das entidades
#Consulta por tipo lazing que quando a consulta é por lista de funcionários por exemplo, 
#spring.jpa.open-in-view= true

# THYMELEAF - É interessante para produção, pois em teste podemos mudar o código e ver algo salvo ainda em cache
spring.thymeleaf.cache= false



